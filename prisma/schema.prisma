// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  engineType  ="client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

// User profile extending Supabase auth
model Profile {
  id            String         @id @default(uuid())
  userId        String         @unique // References auth.users
  firstName     String?
  lastName      String?
  phone         String?
  avatar        String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  reservations  Reservation[]
  orders        Order[]
  notifications Notification[]
  chatMessages  ChatMessage[]
  
  @@map("profiles")
}

// Hotel/Property information
model Property {
  id          String       @id @default(uuid())
  name        String
  address     String
  city        String
  country     String
  description String?
  image       String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  rooms       Room[]
  venues      Venue[]
  
  @@map("properties")
}

// Room types and availability
model Room {
  id           String        @id @default(uuid())
  propertyId   String
  roomNumber   String
  roomType     String        // Standard, Deluxe, Suite
  floor        Int
  capacity     Int
  pricePerNight Decimal      @db.Decimal(10, 2)
  amenities    String[]      // WiFi, TV, Mini Bar, etc.
  images       String[]
  status       RoomStatus    @default(AVAILABLE)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  property     Property      @relation(fields: [propertyId], references: [id])
  reservations Reservation[]
  
  @@unique([propertyId, roomNumber])
  @@map("rooms")
}

enum RoomStatus {
  AVAILABLE
  OCCUPIED
  MAINTENANCE
  RESERVED
}

// Guest reservations
model Reservation {
  id           String            @id @default(uuid())
  profileId    String
  roomId       String
  checkIn      DateTime
  checkOut     DateTime
  guests       Int
  totalPrice   Decimal           @db.Decimal(10, 2)
  status       ReservationStatus @default(PENDING)
  specialRequests String?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  
  profile      Profile           @relation(fields: [profileId], references: [id])
  room         Room              @relation(fields: [roomId], references: [id])
  
  @@map("reservations")
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CHECKED_IN
  CHECKED_OUT
  CANCELLED
}

// Venues (Restaurants, Shops, Services)
model Venue {
  id          String       @id @default(uuid())
  propertyId  String
  name        String
  type        VenueType
  categoryId  String?
  category    ServiceCategory? @relation(fields: [categoryId], references: [id])
  description String?
  location    String       // "Ground Floor", "2nd Floor", etc.
  image       String?
  phone       String?      // Contact phone number
  latitude    Float?       // GPS coordinates for directions
  longitude   Float?       // GPS coordinates for directions
  openingTime String?      // "08:00"
  closingTime String?      // "22:00"
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  property    Property     @relation(fields: [propertyId], references: [id])
  menuItems   MenuItem[]
  orders      Order[]
  
  @@map("venues")
}

enum VenueType {
  RESTAURANT
  CAFE
  BAR
  SHOP
  SPA
  GYM
  TRANSPORT
  ATTRACTION
}

// Menu items for venues
model MenuItem {
  id          String        @id @default(uuid())
  venueId     String
  name        String
  description String?
  price       Decimal       @db.Decimal(10, 2)
  image       String?
  category    String        // Appetizer, Main, Dessert, Beverage
  isAvailable Boolean       @default(true)
  allergens   String[]      // Nuts, Gluten, Dairy, etc.
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  venue       Venue         @relation(fields: [venueId], references: [id])
  orderItems  OrderItem[]
  
  @@map("menu_items")
}

// Orders for food, services, etc.
model Order {
  id              String       @id @default(uuid())
  profileId       String
  venueId         String
  orderNumber     String       @unique
  totalAmount     Decimal      @db.Decimal(10, 2)
  status          OrderStatus  @default(PENDING)
  deliveryAddress String?      // Room number or location
  specialInstructions String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  
  profile         Profile      @relation(fields: [profileId], references: [id])
  venue           Venue        @relation(fields: [venueId], references: [id])
  items           OrderItem[]
  
  @@map("orders")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  DELIVERING
  DELIVERED
  CANCELLED
}

// Individual items in an order
model OrderItem {
  id         String    @id @default(uuid())
  orderId    String
  menuItemId String
  quantity   Int
  price      Decimal   @db.Decimal(10, 2)
  notes      String?
  
  order      Order     @relation(fields: [orderId], references: [id])
  menuItem   MenuItem  @relation(fields: [menuItemId], references: [id])
  
  @@map("order_items")
}

// Notifications for guests
model Notification {
  id        String             @id @default(uuid())
  profileId String
  title     String
  message   String
  type      NotificationType
  isRead    Boolean            @default(false)
  link      String?
  createdAt DateTime           @default(now())
  
  profile   Profile            @relation(fields: [profileId], references: [id])
  
  @@map("notifications")
}

enum NotificationType {
  RESERVATION
  ORDER
  PROMOTION
  ALERT
  MESSAGE
  GENERAL
}

// Chat messages with AI or staff
model ChatMessage {
  id        String      @id @default(uuid())
  profileId String?
  role      MessageRole
  content   String
  metadata  Json?       // For storing additional context
  createdAt DateTime    @default(now())
  
  profile   Profile?    @relation(fields: [profileId], references: [id])
  
  @@map("chat_messages")
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

// Service categories for tabs
model ServiceCategory {
  id                   String   @id @default(uuid())
  name                 String   @unique
  slug                 String   @unique
  icon                 String?
  servicesDescription  String?  // e.g., "Food & Drink" for restaurants, "Spa Services" for spa
  order                Int      @default(0)
  isActive             Boolean  @default(true)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  venues               Venue[]
  
  @@map("service_categories")
}
